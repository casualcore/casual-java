/*
 * Copyright (c) 2017 - 2020, The casual project. All rights reserved.
 *
 * This software is licensed under the MIT license, https://opensource.org/licenses/MIT
 */

//-*- coding: utf-8 -*-
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
}

plugins {
    id 'org.sonarqube' version '2.7'
    id 'signing'
    id 'maven-publish'
}

apply from: 'testsourcesets.gradle'

defaultTasks 'build'

sonarqube {
    properties {
        properties["sonar.host.url"] = 'http://localhost:9000'
        properties["sonar.verbose"] = "true"
        properties['sonar.java.source'] = 8
    }
}

allprojects{
  tasks.withType(JavaCompile) { 
    sourceCompatibility = "8"
    targetCompatibility = "8"
    options.compilerArgs << "-Xlint:all" << "-Werror"
  }
  repositories {
    mavenCentral()
  }
}

subprojects{
  apply from: "$rootProject.projectDir/versions.gradle"
  apply plugin: 'java'
  apply plugin: 'signing'
  apply plugin: 'maven-publish'

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava( MavenPublication ) {
                from components.java
                versionMapping {
                    usage( 'java-api' ) {
                        fromResolutionOf( 'runtimeClasspath' )
                    }
                    usage( 'java-runtime' ) {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = 'Casual JCA'
                    description = 'Casual JCA - Resource Adapter for Casual middleware.'
                    url = 'http://casual.laz.se'
                }
            }
        }
        repositories{
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
//                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                def releasesRepoUrl = layout.buildDirectory.dir('repo/releases')
                def snapshotsRepoUrl = layout.buildDirectory.dir('repo/snapshots')
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                //System.out.println( "Url is " + url )
            }
        }
    }


    signing {
        sign publishing.publications.mavenJava
    }
    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }


}




task dist(type: Sync) {
    allprojects { p ->
        from p.tasks.withType(Jar)
    }
    into "$rootProject.projectDir/dist"
}
