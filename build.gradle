/*
 * Copyright (c) 2017 - 2020, The casual project. All rights reserved.
 *
 * This software is licensed under the MIT license, https://opensource.org/licenses/MIT
 */

//-*- coding: utf-8 -*-
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
}


plugins {
  id("org.sonarqube") version "4.4.1.3373"
}

apply from: 'testsourcesets.gradle'
apply from: 'documentation.gradle'

defaultTasks 'build'

allprojects{
  tasks.withType(JavaCompile) { 
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    options.compilerArgs << "-Xlint:all" << "-Werror"
  }
  repositories {
    mavenCentral()
  } 
}

subprojects{  
  sonar {
    properties {
        properties["sonar.host.url"] = 'http://localhost:9000'
        properties["sonar.verbose"] = "true"
        properties['sonar.java.source'] = 17
     }
  }
  apply plugin: 'jacoco'
  apply from: "$rootProject.projectDir/versions.gradle"
  apply plugin: 'java-library'
  apply from: "$rootProject.projectDir/publish.gradle"
  test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
      testLogging {
        events "passed", "skipped", "failed"
      }
    }

  jacocoTestReport {
    reports {
      xml.required = true
      csv.required = false
    }
  }

  test{
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED', '--add-opens=java.base/java.util=ALL-UNNAMED'
  }
}

// always run tests when running sonar
rootProject.tasks['sonar'].dependsOn.add(subprojects.tasks['test'])

task sphinxClean(type: Delete){
    delete 'docs/source/casual-docs'
    delete 'build/javadoc'
}

// aggregate all javadoc for usage with sphinx as external docs
task sphinxJavadoc(type: Javadoc) {
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    destinationDir = new File("$rootProject.projectDir/build", 'javadoc')
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })   
}

task sphinxMarkdown(type: Copy){
    from "$rootProject.projectDir"
    exclude '**/*query*'
    exclude "build/**"
    exclude "**/.*/**"
    exclude "docs/source/casual-docs/**"
    include '**/*.md'
    into "$rootProject.projectDir/docs/source/casual-docs"
}

task sphinx(type: Exec){
    workingDir 'docs'
    commandLine 'make', 'clean'
    commandLine 'make', 'html'
}

sphinx.dependsOn sphinxMarkdown
sphinxMarkdown.dependsOn sphinxJavadoc
sphinxJavadoc.dependsOn sphinxClean

task dist(type: Sync) {
    allprojects { p ->
        from p.tasks.withType(Jar)
    }
    into "$rootProject.projectDir/dist"
}
